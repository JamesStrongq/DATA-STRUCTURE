/*栈的结构定义*/
typedef int SElemType;
typedef struct{
     SElemType data[MAXSIZE];
	 int top;
}SqStack;

//进栈push
Status Push(SqStack *s,SElemType e){
   if(s -> top == MAXSIZE - 1)
	   return ERROR;
   s -> top++;
   s -> data[s -> top] = e;
   return OK;
}
//出栈pop
Status Pop(SqStack *s,SElemType e){
    if(s -> top == -1)
		return ERROR;
	*e = s -> data[s -> top];
	s -> top--;
    return OK;
 
}

/*两栈共享空间*/
typedef struct{
   SElemType data[MAXSIZE];
   int top1;
   int top2;
}SqDoubleStack;

Status Push(SqDoubleStack *s,SElemType e,int stackNumber){
    if(s -> top1 + 1 == top2)
		return ERROR;
	if(stackNumber == 1)
		s -> data[++s -> top1] = e;
	else if(stackNumber == 2)
        s -> data[++s -> top2] = e;
	return OK;
}

Status Pop(SqDoubleStack *s,SElemType e,int stackNumber){
     if(stackNumber == 1){
	    if(s -> top == -1)
			return ERROR;
		*e = s -> data[s -> top1--];
	 }
	 if(stackNumber == 2){
	    if(s -> top == MAXSIZE)
			return ERROR;
		*e = s -> data[s -> top2++];
	 }
	 return OK;
}

/*栈的链式存储结构*/
typedef struct StackNode{
     SElemType data;
	 struct StackNode *next;
}StackNode,*LinkStackPtr;
typedef strcut LinkStack{
    LinkStackPtr top;
	int count;
}LinkStack;

Status Push(LinkStack *S,SElemType e){
   LinkStackPtr s = (LinkStackPtr)malloc(sizeof(StackNode));
   s -> data = e;
   s -> next = s -> top;
   S -> top = s;
   S -> count++;
   return OK;

}

Status Pop(LinkStack *S,SElemType *e){
   LinkStackPtr p;
   if(StackEmpty(*S))
	   return ERROR;
   *e = S -> top -> data;
   p = S -> top;
   S -> top = S -> top -> next;
   free(p);
   S -> count--;
   return OK;
}

/*队列*/

/*顺序存储结构*/
typedef int QElemType;
typedef struct{
    QElemType data[MAXSIZE];
	int front;
	int rear;
}SqQueue;
//初始化一个空队列Q
Status InitQueue(SqQueue *Q){
   Q -> front = 0;
   Q -> rear = 0;
   return OK;
}
int QueueLength(SqQueue Q){
   return (Q.rear - Q.front + MAXSIZE)%MAXSIZE;
}
//插入
Status EnQueue(SqQueue *Q,QElemType e){
   if((Q -> rear + 1) % MAXSIZE == Q -> front)
	   return ERROR;
   Q -> data[Q -> rear] = e;
   Q -> rear = (Q -> rear + 1) % MAXSIZE;
   return OK;
}
//删除
Status DeQueue(SqQueue *Q,QElemType *e){
    if(Q -> front == Q -> rear)
		return ERROR;
	*e = Q -> data[Q -> front];
	Q -> front = (Q -> front + 1) % MAXSIZE;
	return OK;
}
/*链式存储结构*/
typedef int QElemType;
typedef struct QNode{
   QElemType data;
   struct QNode *next;
}QNode,*QueuePtr;
typedef struct{
   QueuePtr front,rear;
}LinkQueue;
//插入
Status EnQueue(LinkQueue *Q,QElemType e){
   QueuePtr s = (QueuePtr)malloc(sizeof(QNode));
   if(!s)
	   exit(OVERFLOW);
   s -> data = e;
   s -> next = NULL;
   Q -> rear -> next = s;
   Q -> rear = s;
   return OK;
}
Status DeQueue(LinkQueue *Q,QElemType *e){
    QueuePtr p;
	if(Q -> front == Q -> rear)
		return ERROR;
	p = Q -> front -> next;
	*e = p -> data;
	Q -> front -> next = p -> next;
	if(Q -> rear == p)
		Q -> rear = Q -> front;
	free(p);
	return OK;
 }