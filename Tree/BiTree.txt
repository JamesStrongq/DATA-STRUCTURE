#include <stdio.h>
#include<stdlib.h>
#include<windows.h>
#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define OVERFLOW -1
typedef int Status;
typedef char ElemType;

typedef struct BiTNode{
    ElemType data;
struct BiTNode *lchild,*rchild;

}BiTNode,*BiTree;

//二叉树的建立
void CreateBiTree(BiTree &T){
   ElemType ch;
//   for(int i = 0;i < 10;i++){
   ch = getchar();
   
   
   if(ch == '#'){
       T = NULL;
       
   }else{
      T = (BiTNode*)malloc(sizeof(BiTNode));
      if(!T)           exit(OVERFLOW);
      T->data = ch;   printf("%X ",T);  
    CreateBiTree(T->lchild);
    CreateBiTree(T->rchild);   
      
   }
    
    //return OK;
}
 
//前序遍历
void PreOrderTraverse(BiTree T){
    //if(T == NULL)
//       return ERROR;  
if(T){
              
    printf("%c",T->data);
    PreOrderTraverse(T->lchild);
    PreOrderTraverse(T->rchild);}
}

//中序遍历
void  InOrderTraverse(BiTree T){
if(T){
InOrderTraverse(T -> lchild);
printf("%c",T -> data);
InOrderTraverse(T -> rchild);
}
}

//后序遍历
void  PostOrderTraverse(BiTree T){
if(T){
     PostOrderTraverse(T -> lchild);
     PostOrderTraverse(T -> rchild);
     printf("%c",T -> data);
     }
     }

int main(){
BiTree T ;

printf("请输入二叉树中的字符:\n");
CreateBiTree(T);
//printf("%X ",T); 
printf("前序遍历的结果为:\n");
PreOrderTraverse(T);
printf("\n中序遍历的结果为:\n");
InOrderTraverse(T);
printf("\n后序遍历的结果为:\n");
PostOrderTraverse(T);

free(T);

system("pause");

}